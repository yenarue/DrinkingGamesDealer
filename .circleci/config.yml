aliases:
  - &attach-workspace
    at: ~/drinkingdealer

  - &restore-cache
    key: jars-{{ .Branch }}-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}

  - &download-dependencies
    name: Download Dependencies
    command: ./gradlew androidDependencies

  - &save-cache
    paths:
      - ~/.gradle
      - ~/.idea
    key: jars-{{ .Branch }}-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}

  - &install-awscli
    name: Install awscli
    command: sudo pip install awscli

  - &prepare-google-service-for-dev
    name: Prepare for Dev Flavor
    command: |
      echo $FOMES_GOOGLE_SERVICE | base64 --decode --ignore-garbage > app/google-services.json

#  - &prepare-google-service-for-release
#    name: Prepare for Release Flavor
#    command: |
#      mkdir app/src/staging
#      mkdir app/src/release
#      echo $FOMES_RELEASE_GOOGLE_SERVICE | base64 --decode --ignore-garbage > app/src/release/google-services.json
#      cat app/src/release/google-services.json > app/src/staging/google-services.json
#      aws s3 cp s3://girlapp/fomes.jks app/fomes.jks


defaults: &defaults
  working_directory: ~/drinkingdealer
  docker:
    - image: circleci/android:api-28-alpha    # https://circleci.com/docs/2.0/circleci-images/#android
  environment:
    ADB_INSTALL_TIMEOUT: 60
    JVM_OPTS: -XX:ParallelGCThreads=2 -XX:ConcGCThreads=2 -XX:ParallelGCThreads=2 -Djava.util.concurrent.ForkJoinPool.common.parallelism=2
    GRADLE_OPTS: '-Dorg.gradle.daemon=true -Dorg.gradle.jvmargs="-XX:+HeapDumpOnOutOfMemoryError"'
    _JAVA_OPTIONS: -Xmx3g -Xmx1g

version: 2
jobs:
  test:
    <<: *defaults
    steps:
      - checkout
      - restore_cache: *restore-cache
      - run: *download-dependencies
      - save_cache: *save-cache

      ### prepare
      - run: *install-awscli
      - run: *prepare-google-service-for-dev
#      - run: *prepare-google-service-for-release

      ### Test
      - run:
          name: Run Tests
          command: ./gradlew --info --stacktrace --no-daemon --max-workers 2 testDebugUnitTest # connectedAndroidTest
          no_output_timeout: 1200m
      #      ### Jacoco Report
      #      - run:
      #          name: Test Coverage
      #          command: ./gradlew coverageReport
      ### Save Artifacts
      - store_artifacts:
          path: app/build/reports
          destination: reports
      - store_test_results:
          path: app/build/test-results
          destination: reports/junit
      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples

  build:
    <<: *defaults
    steps:
      - checkout
      - restore_cache: *restore-cache
      - run: *download-dependencies
      - save_cache: *save-cache

      ### prepare
      - run: *install-awscli
      - run: *prepare-google-service-for-dev
#      - run: *prepare-google-service-for-release

      - run:
          name: Unset Android Ndk For Bug Hunting
          command: bash .circleci/unset-android-ndk.sh

      ### build
      - run:
          name: Build
          command: ./gradlew --stacktrace assembleDebug
          no_output_timeout: 1200m
      - persist_to_workspace:
          root: .
          paths: app/build/outputs
      - store_artifacts:
          path: app/build/outputs

      ### deploy
  dev-deploy:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace: *attach-workspace
      - run:
          name: Delivery to Slack for Dev
          command: bash .circleci/delivery-to-slack.sh $DEV_APK_BUILDTYPE $DEV_SLACK_DELIVERY_CHANNEL $CIRCLE_BRANCH
      - store_artifacts:
          path: app/build/outputs

  release-deploy:
    <<: *defaults
    steps:
      - checkout
      - attach_workspace: *attach-workspace
      - run:
          name: Delivery to Slack for Release
          command: bash .circleci/delivery-to-slack.sh $RELEASE_APK_BUILDTYPE $RELEASE_SLACK_DELIVERY_CHANNEL $CIRCLE_BRANCH
      - store_artifacts:
          path: app/build/outputs

workflows:
  version: 2
  build-deploy:
    jobs:
      - test
      - build:
          requires:
            - test
      - dev-deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - master
#      - release-deploy:
#          requires:
#            - build
#          filters:
#            branches:
#              only:
#                - release